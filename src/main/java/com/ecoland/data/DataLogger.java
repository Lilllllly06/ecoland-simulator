package com.ecoland.data;\n\nimport com.ecoland.entity.SpeciesType;\nimport com.ecoland.simulation.EntityManager;\n\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Logs simulation statistics over time and provides functionality to save the log.\n */\npublic class DataLogger {\n\n    private static class LogEntry {\n        long tick;\n        int herbivoreCount;\n        int carnivoreCount;\n        int plantCount; // Assuming we might track explicit Plant entities later\n        int totalPopulation;\n\n        LogEntry(long tick, int herbivoreCount, int carnivoreCount, int plantCount, int totalPopulation) {\n            this.tick = tick;\n            this.herbivoreCount = herbivoreCount;\n            this.carnivoreCount = carnivoreCount;\n            this.plantCount = plantCount;\n            this.totalPopulation = totalPopulation;\n        }\n\n        String toCsvRow() {\n            return String.format(\"%d,%d,%d,%d,%d\",\n                                 tick, totalPopulation, herbivoreCount, carnivoreCount, plantCount);\n        }\n\n        static String getCsvHeader() {\n            return \"Tick,TotalPopulation,Herbivores,Carnivores,Plants\";\n        }\n    }\n\n    private final List<LogEntry> logHistory = new ArrayList<>();\n    private final int logFrequency; // Log every N ticks\n\n    public DataLogger(int logFrequency) {\n        this.logFrequency = Math.max(1, logFrequency); // Ensure frequency is at least 1\n    }\n\n    public DataLogger() {\n        this(10); // Default: log every 10 ticks\n    }\n\n    /**\n     * Records the current simulation state if the current tick is a multiple of the log frequency.\n     *\n     * @param currentTick The current simulation tick number.\n     * @param entityManager The entity manager to get population counts from.\n     */\n    public void recordTick(long currentTick, EntityManager entityManager) {\n        if (currentTick % logFrequency == 0) {\n            int herbivoreCount = entityManager.getPopulationCount(SpeciesType.HERBIVORE);\n            int carnivoreCount = entityManager.getPopulationCount(SpeciesType.CARNIVORE);\n            int plantCount = entityManager.getPopulationCount(SpeciesType.PLANT); // Track plants if they are entities\n            int totalPopulation = entityManager.getTotalPopulation();\n\n            LogEntry entry = new LogEntry(currentTick, herbivoreCount, carnivoreCount, plantCount, totalPopulation);\n            logHistory.add(entry);\n            // System.out.println(\"DataLogger: Recorded tick \" + currentTick); // Debug logging\n        }\n    }\n\n    /**\n     * Saves the recorded simulation data to a CSV file.\n     *\n     * @param filename The full path to the file where the data should be saved.\n     * @return true if saving was successful, false otherwise.\n     */\n    public boolean saveData(String filename) {\n        if (logHistory.isEmpty()) {\n            System.out.println(\"DataLogger: No data to save.\");\n            return false;\n        }\n\n        try (PrintWriter writer = new PrintWriter(new FileWriter(filename))) {\n            // Write header\n            writer.println(LogEntry.getCsvHeader());\n\n            // Write data rows\n            for (LogEntry entry : logHistory) {\n                writer.println(entry.toCsvRow());\n            }\n\n            System.out.println(\"DataLogger: Successfully saved data to \" + filename);\n            return true;\n        } catch (IOException e) {\n            System.err.println(\"DataLogger: Error saving data to \" + filename + \" - \" + e.getMessage());\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public void clearLog() {\n        logHistory.clear();\n        System.out.println(\"DataLogger: Log cleared.\");\n    }\n} 